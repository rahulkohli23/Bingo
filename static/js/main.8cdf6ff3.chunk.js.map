{"version":3,"sources":["components/Cards/Card.js","data/phrases.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","card","border","borderRadius","position","bottom","left","right","top","backgroundColor","color","cardBtn","width","SimpleCard","props","classes","cardText","cardIndex","useState","isActive","setIsActive","Card","variant","className","Button","onClick","handleCardClick","disabled","Typography","component","data","maxWidth","margin","padding","title","marginBottom","Game","isBingo","setIsBingo","activeCards","setActiveCards","phrases","setPhrases","useEffect","dataPhrases","a","j","x","i","length","Math","floor","random","shuffle","console","log","bingoPoints","index","indexOf","cards","splice","push","checkIsBingo","bingoSets","set","includes","isSubset","arr","isPresent","s","TableContainer","Paper","Table","TableBody","map","TableRow","TableCell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cdf6ff3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    // minWidth: ,\n  },\n  card: {\n    border: 0,\n    borderRadius: 0,\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    top: 0,\n    \"&:hover .MuiButton-text\": {\n      backgroundColor: \"#9999ff\",\n    },\n    \"&.active .MuiButton-text\": {\n      backgroundColor: \"#3333ff\",\n      color: \"#fff\",\n    },\n  },\n  cardBtn: {\n    color: \"#111\",\n    borderRadius: 0,\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    top: 0,\n    width: \"100%\",\n  },\n});\n\nexport default function SimpleCard(props) {\n  const classes = useStyles();\n  const { cardText, cardIndex } = props;\n\n  const [isActive, setIsActive] = useState(false);\n\n  const handleClickBox = function () {\n    setIsActive(!isActive);\n    props.handleCardClick(cardIndex);\n  }\n\n  return (\n    <Card variant=\"outlined\" className={classes.card + (isActive || cardIndex === 13 ? \" active\" : \"\")}>\n      <Button className={classes.cardBtn} onClick={handleClickBox} disabled={cardIndex === 13}>\n        <Typography variant=\"body2\" component=\"p\">\n          {cardText}\n        </Typography>\n      </Button>\n    </Card>\n  );\n}\n\n    //   <CardActions>\n    //     <Button size=\"small\">Learn More</Button>\n    //   </CardActions>","export const data = {\n  title: \"Online Conferencing\",\n  phrases: [\n    \"(Child noises in the background)\",\n    \"Hello, hello ?\",\n    \"I need to jump in another call\",\n    \"Can everyone go on mute\",\n    \"Could you please get closer to the mic\",\n    \"(Load painful echo/feedback)\",\n    \"Next slide please\",\n    \"Can we take this ofline\",\n    \"is __ on this call ?\",\n    \"Could you share these slides afterwards ?\",\n    \"can somebody grant presenter rights ?\",\n    \"can you email that to everyone ?\",\n    \"Sorry, I had problem logging in\",\n    \"(animal noises in the background)\",\n    \"Sorry, I didn't found the conference Id\",\n    \"I was having connection Issues\",\n    \"I'll have to get back to you\",\n    \"who just joined ?\",\n    \"Sorry, something __ with my calander\",\n    \"do you see my screen\",\n    \"Lets wait for ___\",\n    \"You will send the minutes\",\n    \"Sorry, I was on mute\",\n    \"Can you repeat please\",\n    \"is anyone there ?\"\n  ],\n};\n\nconst shuffle = function (array) {\n  var currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n};\n\nexport const phrases = async (data) => {\n  const shuffledPhrases = await shuffle(data.phrases);\n//   console.log(shuffledPhrases);\n  return shuffledPhrases.splice(12,0,data.title);\n\n  // return textPhrase;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"../Cards/Card\";\nimport \"./Game.css\";\nimport {\n  Table,\n  Paper,\n  TableContainer,\n  TableBody,\n  TableRow,\n  TableCell,\n  Typography,\n} from \"@material-ui/core\";\nimport { data } from \"../../data/phrases\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 680,\n    margin: \"auto\",\n    padding: \"15px 0\",\n    \"& .MuiTableCell-root\": {\n      border: \"solid 2px #ccc\",\n      padding: 0,\n    },\n  },\n  title: {\n    marginBottom: 15,\n  },\n});\n\nconst Game = () => {\n  const classes = useStyles();\n  const [isBingo, setIsBingo] = useState(false);\n  const [activeCards, setActiveCards] = useState([13]);\n  const [phrases, setPhrases] = useState([]);\n  \n\n  useEffect(() => {\n    let dataPhrases = shuffle(data.phrases);\n    dataPhrases[12] = data.title\n    console.log(dataPhrases)\n    setPhrases(dataPhrases)\n  }, [])\n  function shuffle(a) {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}\n\n  const bingoPoints = [\n    // row bingo\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25],\n\n    // column bingo\n    [1, 6, 11, 16, 21],\n    [2, 7, 12, 17, 22],\n    [3, 8, 13, 18, 23],\n    [4, 9, 14, 19, 24],\n    [5, 10, 15, 20, 25],\n\n    // diagonal bingo\n    [1, 7, 13, 19, 25],\n    [5, 9, 13, 17, 21],\n  ];\n\n  const handleCardClick = function (cardIndex) {\n    let index = activeCards.indexOf(cardIndex);\n    let cards = activeCards;\n\n    if (index >= 0) {\n      cards.splice(index, 1);\n    } else {\n      cards.push(cardIndex);\n    }\n\n    // indicates the selected cards\n    setActiveCards([...cards]);\n    checkIsBingo(cards, cardIndex);\n  };\n\n  const checkIsBingo = function (cards, cardIndex) {\n    let bingoSets = [];\n    for (let i in bingoPoints) {\n      let set = bingoPoints[i];\n      // get the bingo points for selected card index\n      if (set.includes(cardIndex)) bingoSets.push(set);\n    }\n\n    for (let i in bingoSets) {\n      setIsBingo(false);\n      let set = bingoSets[i];\n      if (isSubset(set, cards)) {\n        setIsBingo(true);\n        break;\n      }\n    }\n  };\n\n  const isSubset = function (set, arr) {\n    let isPresent = true;\n    for (let i in set) {\n      let s = set[i];\n      if (!arr.includes(s)) {\n        isPresent = false;\n        break;\n      }\n    }\n    return isPresent;\n  };\n\n  // Shuffle\n  // const shuffledPhrases = shuffle(data.phrases)\n  // const textPhrase = shuffledPhrases.splice(12,0,data.title);\n\n  return (\n    <div className={classes.root}>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        className={classes.title + (isBingo ? \" is-bingo\" : \"\")}\n      >\n        {isBingo ? \"You got a BINGO\" : \"Play Bingo\"}\n      </Typography>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableBody>\n            {[1, 2, 3, 4, 5].map((i) => {\n              return (\n                <TableRow key={\"row_\" + i}>\n                  {[1, 2, 3, 4, 5].map((j) => {\n                    let cardIndex = 5 * (i - 1) + j;\n                    let cardText = phrases[cardIndex - 1];\n\n                    return (\n                      <TableCell\n                        className=\"table-cell\"\n                        key={\"card_\" + cardIndex}\n                      >\n                        <Card\n                          className=\"Card\"\n                          cardIndex={cardIndex}\n                          cardText={cardText}\n                          handleCardClick={handleCardClick}\n                        />\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default Game;\n","import './App.css';\nimport Game from \"./components/Game/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"app-container\">\n        <Game />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}